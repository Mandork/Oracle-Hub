#! /bin/bash

# -----------------------------------------------------------------------------
# Documentation
# -----------------------------------------------------------------------------

#    script: ${LINDE_ORA_SITE}/bin/senvora
#    author: thd
#      date: 2014/03
#   comment: Oracle server plug / module environment: oracle shell environment
#    run as: any user to setup oracle shell environment
#   changes: 2010/09/10 unset all environment variables, whose value matches $ORACLE_HOME, $AC2_INSTANCE_ROOT, $ORACLE_SID
#            2017/03/20 allow duplicate service_names, crosscheck against /var/oracle/etc/config_oratab
#     usage: $0 $ORACLE_SID
#     files: ${LINDE_ORA_SITE}/bin/senvora
#            ${LINDE_ORA_SITE}/etc/<service>/database/${ORACLE_SID}.env
#      note: set mandatory environment variable for specific {ORACLE_SID}
#  requires:
#           LINDE_ORA_HOME=${HOME}
#           LINDE_ORA_SITE=/opt/oracle/site
#           LINDE_ORA_OWNER=oracle
#           LINDE_ORA_GROUP=dba
#
#   exports: from ${ORACLE_SID}.env:
#           ORACLE_SID
#           ORACLE_DB_NAME
#           ORACLE_SERVICE_NAME
#           ORACLE_BASE
#           ORACLE_HOME
#           ORACLE_HOME_NAME
#           NLS_LANG
#           TNS_ADMIN
#
#   exports: derived from ORACLE_HOME 
#           PATH
#           LD_LIBRARY_PATH

# -----------------------------------------------------------------------------
# Changelog
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Initialization
# -----------------------------------------------------------------------------

typeset    _oracle_env_args=
typeset    _oracle_env_serv=
typeset    _oracle_env_type=
typeset    _oracle_env_name=
typeset    _oracle_env_file=

typeset -i _select=0
typeset -i _cleanup=0
typeset -i _msh=0
typeset -i _rc_senvora=0

typeset _ifs_="$IFS"
IFS=$' \t\n'

typeset _node=$(hostname)
typeset _uname=$(/bin/uname -s | tr '[:upper:]' '[:lower:]')

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------

function _pathedit
{
    case $1 in
    set)
        if ! echo $PATH | /bin/egrep -q "(^|:)$2($|:)" ; then
            PATH=$2:$PATH
        fi
        ;;
    append)
        if ! echo $PATH | /bin/egrep -q "(^|:)$2($|:)" ; then
            PATH=$PATH:$2
        fi
        ;;
    unset)
        if [[ -n "$PATH" ]]; then
        #   PATH=$(echo $2 $PATH | perl -e '{($r,$p)=split(/\s+/,<>); @_=grep(($_ ne $r),split(/:/,$p)); print join(":",@_)}')
            PATH=$(echo $2 $PATH | perl -e '{($r,$p)=split(/\s+/,<>); @_=grep(($_ !~ /$r/),split(/:/,$p)); print join(":",@_)}')
        fi
        ;;
esac
}

function _ldpathedit_linux
{
    typeset ld_library_path="" 
    case $1 in
    set)
        if ! echo "$LD_LIBRARY_PATH" | /bin/egrep -q "(^|:)$2($|:)" ; then
            ld_library_path=$2:$LD_LIBRARY_PATH
            LD_LIBRARY_PATH=$(echo $ld_library_path | sed -e 's/^://' -e 's/:$//')
        fi
        ;;
    append)
        if ! echo "$LD_LIBRARY_PATH" | /bin/egrep -q "(^|:)$2($|:)" ; then
            ld_library_path=$LD_LIBRARY_PATH:$2
            LD_LIBRARY_PATH=$(echo $ld_library_path | sed -e 's/^://' -e 's/:$//')
        fi
        ;;
    unset)
        if [[ -n "$LD_LIBRARY_PATH" ]]; then
            ld_library_path=$(echo $2 $LD_LIBRARY_PATH | perl -e '{($r,$p)=split(/\s+/,<>); @_=grep(($_ !~ /$r/),split(/:/,$p)); print join(":",@_)}')
            LD_LIBRARY_PATH=$(echo $ld_library_path | sed -e 's/^://' -e 's/:$//')
        fi
        ;;
    esac
}

function _ldpathedit_aix
{
    typeset ld_library_path="" 
    case $1 in
    set)
        if ! echo "$LIBPATH" | /bin/egrep -q "(^|:)$2($|:)" ; then
            ld_library_path=$2:$LIBPATH
            LIBPATH=$(echo $ld_library_path | sed -e 's/^://' -e 's/:$//')
        fi
        ;;
    append)
        if ! echo "$LIBPATH" | /bin/egrep -q "(^|:)$2($|:)" ; then
            ld_library_path=$LIBPATH:$2
            LIBPATH=$(echo $ld_library_path | sed -e 's/^://' -e 's/:$//')
        fi
        ;;
    unset)
        if [[ -n "$LIBPATH" ]]; then
            ld_library_path=$(echo $2 $LIBPATH | perl -e '{($r,$p)=split(/\s+/,<>); @_=grep(($_ !~ /$r/),split(/:/,$p)); print join(":",@_)}')
            LIBPATH=$(echo $ld_library_path | sed -e 's/^://' -e 's/:$//')
        fi
        ;;
    esac
}

function _ldpathedit
{
    local _uname
    _uname=$(/bin/uname -s | tr '[:upper:]' '[:lower:]')
    case "${_uname}" in
        'aix'*)
            _ldpathedit_aix ${@}
            return $?
            ;;
        'linux'*)
            _ldpathedit_linux ${@}
            return $?
            ;;
    esac
}

function _create_listing
{
    typeset pickup=0; [[ -n "$1" ]] && pickup=$1;
    typeset service
    typeset iobuf
    typeset procs_pmon
    typeset procs_tnslsnr

    typeset -a oraidnt  
    typeset -a orapath  
    typeset -a oraserv  
    typeset -a oranote  
    typeset -a oratype  
    typeset -a orauser  
    typeset -a oraproc  

    typeset -i errors=0
    typeset -i i=0

    typeset _ifs=

    procs_pmon=$(ps -e -o user,comm,args | awk '$2 ~ /ora_...._/ {print $1, $3}; $2 == "oracle" {print $1, $3}' | grep "ora_pmon")
    procs_tnslsnr=$(ps -e -o user,comm,args | awk '$2 == "tnslsnr" {print $1, $3, $4}')

    # start with i=1 => 1 .. ${#oraidnt[*]}
    i=1
    while read iobuf
    do
        _ifs="$IFS"; IFS=\:; set -- $iobuf ; oraidnt[$i]="$1"; orapath[$i]="$2"; oraserv[$i]="$4"; oranote[$i]="$5"; IFS="${_ifs}"; set -- ;

        oratype[$i]=""
        orauser[$i]=""
        oraproc[$i]=" "

        [[ -e "${orapath[$i]}" ]] && { orauser[$i]=$(ls -ld ${orapath[$i]} | awk '{print $3}'); }

        # remember state of process by asterisk
        # oracle database
        iobuf=$(echo "${procs_pmon}" | grep -w "ora_pmon_${oraidnt[$i]}")
        if [[ -n "${iobuf}" ]]
        then
            oraproc[$i]="*"
            oratype[$i]="database"
            set -- $iobuf ; orauser[$i]="$1"; set -- ; 
        else
            # remember state of process by asterisk
            # oracle listener
            iobuf=$(echo "${procs_tnslsnr}" | grep -w "${orapath[$i]}/bin/tnslsnr ${oraidnt[$i]}")
            if [[ -n "${iobuf}" ]]; then
                oraproc[$i]="*"
                oratype[$i]="listener"
                set -- $iobuf ; orauser[$i]="$1"; set -- ; 
            fi
        fi
        (( i++ ))
    done <<EofHERE
$(cat /var/oracle/etc/config_oratab  2>/dev/null | grep -v ^# | grep -v "^#" | grep -v "^[[:space:]]*$" | sort -t: -k4 -k1)
EofHERE

    echo ""
    i=1
    service=""
    while [[ $i -le ${#oraidnt[*]} ]]
    do
        [[ "$service" != "${oraserv[$i]}" ]] &&
        { 
            instance="${oraserv[$i]}" 
            echo "--------------------------------------------------------------------------------"
            echo "[${oraserv[$i]}]"
            service=${oraserv[$i]}
        }
        up=""
        printf "%2d) %1.1s %-27.27s [%-8.8s] [%s]\n" $i "${oraproc[$i]}" "${oraidnt[$i]}" "${orauser[$i]}" "${oranote[$i]}"
        (( i++ ))
    done
    echo ""
    [[ $pickup -eq 0 ]] && return $errors 

    while true
    do
        read -p "enter number or identifier> " iobuf
        if [[ -z "$iobuf" ]]; then
            break
        elif ( echo $iobuf | egrep -q '^[[:digit:]]{1,}$' ); then
            i=$iobuf;
            if [[ $i -gt ${#oraidnt[*]} ]]; then
                echo "select number between 1 .. ${#oraidnt[*]} or press return to exit.";
            else
                _oracle_env_type=${oratype[$i]}
                _oracle_env_serv=${oraserv[$i]}
                _oracle_env_name=${oraidnt[$i]}
                _oracle_env_args=${_oracle_env_serv}:${_oracle_env_name}
                break
            fi
        else
            _oracle_env_name=$iobuf
            _oracle_env_args=${_oracle_env_name}
            break
        fi
    done    
    return $errors
}

# _get_env_file <list of files>
# crosscheck list on .env files against arrays oraidnt/oraserv
# return first .env with matching name/serv pair
# otherwise return first .env file from argument list
function _get_env_file
{
    typeset list=$*
    typeset file
    typeset type
    typeset serv
    typeset name
    typeset iobf
    typeset _ifs=
    
    typeset -a oraidnt  
    typeset -a oraserv  
    typeset -i i=1
    while read iobf
    do
        _ifs="$IFS"; IFS=\:; set -- $iobf; oraidnt[$i]="$1"; oraserv[$i]="$4"; IFS="${_ifs}"; set --;
        (( i++ ))
    done <<EofHERE
$(cat /var/oracle/etc/config_oratab  2>/dev/null | grep -v ^# | grep -v "^#" | grep -v "^[[:space:]]*$" | sort -t: -k4 -k1)
EofHERE

    typeset -i last=${#oraidnt[*]}
    for file in $list
    do
        iobf=$(dirname ${file})
        type=$(basename ${iobf})        # database, pluggable, oraclehone, listener, 
        iobf=$(dirname ${iobf})
        serv=$(basename ${iobf})
        iobf=$(basename ${file})
        name=${iobf%.env}

        i=1
        while [[ $i -le $last ]]
        do
            if [[ $name = ${oraidnt[$i]} && $serv = ${oraserv[$i]} ]]
            then
                echo $file
                return 0
            fi
            (( i++ ))
        done
    done
    echo $1
    return 1
}

# oracle related environment variables
#       unset: NLS_LANG ORA_NLS10 ORA_NLS32 ORA_NLS33 ORA_TZFILE
#       unset: ORACLE_BASE ORACLE_HOME ORACLE_PATH ORACLE_SID ORACLE_TRACE
#   unchanged: ORAENV_ASK SQLPATH
#       unset: TWO_TASK NLS_OS_CHARSET
#   unchanged: CLASSPATH DISPLAY LANG or LC_ALL LD_OPTIONS 
#     cleanup: PATH LD_LIBRARY_PATH/LIBPATH/SHLIB_PATH
#   unchanged: TEMP TMP TMPDIR
#   unchanged: NLS_DATE_FORMAT NLS_TIMESTAMP_FORMAT NLS_TIMESTAMP_TZ_FORMAT
function _cleanup_environment
{
    typeset _oracle_home_="";
    [[ -n "${ORACLE_HOME}" ]] && _oracle_home_=${ORACLE_HOME}

    # cleanup PATH and LD_LIBRAY_PATH
    [[ -n "${_oracle_home_}" ]] &&
    {
        _pathedit   unset ${_oracle_home_}/bin 
        _ldpathedit unset ${_oracle_home_}/lib
        # _env_list=$(p=${_oracle_home_} perl -e '{$p=delete $ENV{"p"}; foreach my $k (keys %ENV) {$v=$ENV{$k}; next if ($k=~/PATH/); push @k,$k if ($v=~/$p/);} print join " ", @k;}')
        # unset $_env_list
    }
    
    # might be set by 3rd party tools later on
    _env_list=$(perl -e '{foreach my $k (keys %ENV) {push @k,$k if ($k =~ /^ORA_NLS/);} print join " ", @k;}')
    unset nothing ${_env_list}
    unset NLS_LANG ORACLE_PATH ORACLE_TRACE ORA_TZFILE TWO_TASK NLS_OS_CHARSET

    # implicitly unset variables that are not available in every env file
    # if we don't unset them every time, then they will be reused by other services leading to mix-up
    unset LINDE_SVC_TIMEZONE TZ LINDE_SVC_UMASK

    # will be set by senvora
    unset ORACLE_SID ORACLE_DB_NAME ORACLE_SERVICE_NAME ORACLE_HOME ORACLE_HOME_NAME ORACLE_BASE TNS_ADMIN LINDE_ORAHOME_VERSION LINDE_ORAHOME_VERSION_MAJOR

    # dont clean by default: will break provisioning scripts
    [[ ${_cleanup} -eq 1 ]] &&
    {
        unset ${!LINDE_DCS*}      # dcs related
        unset ${!LINDE_SVC*}      # service related
        unset ${!LINDE_DBS*}      # database related
        unset ${!LINDE_LSR*}      # listener related
        unset ${!LINDE_ORAHOME*}  # oraclehome related
    }

    # will be set be _msh_setup
    unset ALERTLOG CONFIGORA CONTROLFILES INITORA SPFILE 
}

# _unset_local_environment
# unset local variables and functions
function _unset_local_environment
{
    IFS="${_ifs_}"
    unset _iobuf_ _count_ _ifs_
    unset _oracle_env_args _oracle_env_serv _oracle_env_name _oracle_env_type _oracle_env_file
    unset  _rc_senvora _select _cleanup _msh _pathedit _ldpathedit _create_listing 
    unset _cleanup_environment _spfile_strings _spfile_archdest _spfile_environment _msh_setup _unset_local_environment _get_env_file
}

# _spfile_strings
#    usage: _spfile_strings $spfile > /tmp/$spfile.$$.txt
# requires: perl in PATH available, read access to $spfile
#  process:
#   read ahead 1st 512 bytes
#   check next 20 bytes
#    ascii data -> 10g
#   binary data -> 11g
#   loop
#       read 512 blocks
#       10g : use as is
#       11g : strip of first 20 bytes. last 4 bytes
#       strip off trailing \000
#       print
#   end loop
function _spfile_strings
{
    spfile=$1 perl 2>/dev/null <<\EofHERE
my $file = $ENV{'spfile'};
my ($ioh, $iobuf, $stbuf, $blen, $vers);

$ioh = undef;
open ($ioh, '<', $file);
seek($ioh, 512, 0); $blen = read $ioh, $iobuf, 20;
seek($ioh, 512, 0); 
if ( $iobuf =~ /^[\040-\176\n]+$/ms ) { $vers = 10; } else { $vers = 11; }
while (1)
{
    $blen = read $ioh, $iobuf, 512;
    last if ($blen < 512);
    if ($vers < 11) { $stbuf = $iobuf; } 
    else            { $stbuf = substr($iobuf, 20, 488); }
    $stbuf =~ s/\000+$//ms;
    print $stbuf;
}
close ($ioh);
EofHERE
}

# _spfile_archdest
#    usage: $archdest=$(_spfile_strings $pfile $sid)
# requires: perl in PATH available, read access to $pfile
#
#   ='LOCATION=/pkg/AC04/oraAC04/archives/pAC04 VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=pAC04'
#   ='location="/pkg/AC04/oraAC04/archives/pAC04"','valid_for=(ONLINE_LOGFILE,ALL_ROLES)'
#   ='location="/pkg/AC04/oraAC04/archives/pAC_CSS/"','valid_for=(ONLINE_LOGFILE,ALL_ROLES)'
#   ='/pkg/AC04/oraAC04/archives/pAC_DSS/'
#   ='location=/apps/RACAPP01/oracle/oracle-RACAPP01-AODB401-d/oraarch REOPEN=180 MANDATORY'
#   ='location="/pkg/SC04/oraSC04/archives/SM_DEV2/"'
function _spfile_archdest
{
file=$1 sid=$2 perl -w 2>/dev/null <<\EofHERE

use strict;

my $file = $ENV{'file'};
my $sid  = $ENV{'sid'};
my ($ioh, @temp, @arch, $arch);

open ($ioh, '<', $file);
while (<$ioh>)
{
    chomp; s/^\s+//; s/\s+$//;
    if ( /^(?:(?:${sid}|\*)\.)?log_archive_dest(?:_1)?\s*=/i ) { push @temp, $_; }
}
close($ioh);

push @arch, grep(/^${sid}\.log_archive_dest(?:_1)?\s*=\s*['"]location=/i, @temp);
push @arch, grep(/^\*\.log_archive_dest(?:_1)?\s*=\s*['"]location=/i    , @temp);
push @arch, grep(/^log_archive_dest(?:_1)?\s*=\s*['"]location=/i        , @temp);
push @arch, grep(/^${sid}\.log_archive_dest(?:_1)?\s*=\s*['"]?\//i, @temp);
push @arch, grep(/^\*\.log_archive_dest(?:_1)?\s*=\s*['"]?\//i    , @temp);
push @arch, grep(/^log_archive_dest(?:_1)?\s*=\s*['"]?\//i        , @temp);

if (@arch)
{
    ($arch) = ($arch[0] =~ /^[^=]+=\s*(.*)$/);
    if ($arch =~ /^'location=/i)  { ($arch) = $arch =~ /^'location=([^\']+)'/i; }
    if ($arch =~ /^"location=/i)  { ($arch) = $arch =~ /^'location=([^\']+)"/i; }
    if ($arch =~ /^'/          )  { ($arch) = $arch =~ /^'([^']+)'/; }
    if ($arch =~ /^"/          )  { ($arch) = $arch =~ /^"([^"]+)"/; }
    $arch = (split(/\s+/, $arch))[0];
    $arch =~ s,/$,,;
    print "$arch";
}
EofHERE
}

# _spfile_environment
#    usage: iobuf=$(_spfile_strings $pfile $sid)
#           eval ${iobuf}
# requires: perl in PATH available, read access to $pfile
# extracts: control_files background_dump_dest user_dump_dest core_dump_dest audit_file_dest __oracle_base
#   stdout: audit_file_dest=="/apps/xapp07/oracle/oracle-xapp07-0000001F-d/admin/aoDB307/audit" etc.
function _spfile_environment
{
    file=$1 sid=$2 perl -w 2>/dev/null <<\EofHERE

use strict;

my $file = $ENV{'file'};
my $sid  = $ENV{'sid'};
my ($ioh, @iobuf, @params, $param, @matches, %value, @values, $value, $dummy);

@params = qw/control_files background_dump_dest user_dump_dest core_dump_dest audit_file_dest db_recovery_file_dest __oracle_base/;
open ($ioh, '<', $file);
while (<$ioh>)
{
    chomp; 
    next if (/^#/ or /^\s*$/); 
    s/^\s+//; s/\s+$//; s/#.*$//;
    push @iobuf, $_;
}
close($ioh);

@iobuf = sort @iobuf;

foreach $param (@params)
{
    $value{$param} = ""; 
    @matches = grep(/^(?:(?:${sid}|\*)\.)?${param}\s*=/i, @iobuf);
    if (@matches)
    {
        ($dummy, $value) = split(/\s*=\s*/, $matches[0], 2);
        @values = split(/,/, $value);
        for (@values) { s/^'//; s/'$//;}
        $value{$param} = join(',', @values);
    }
}

foreach $param (@params) { print "typeset _$param=\"$value{$param}\"\n"; }

EofHERE
}

# setup msh related evironment
# ALERTLOG CONFIGORA CONTROLFILES INITORA SPFILE 
#   aoDB307.__oracle_base='/apps/xapp07/oracle/oracle-xapp07-0000001F-d'#ORACLE_BASE set from environment
#   *.diagnostic_dest='/apps/xapp07/oracle/oracle-xapp07-0000001F-d'
function _msh_setup
{
    SPFILE=""
    INITORA=""
    CONFIGORA=""
    ALERTLOG=""
    CONTROLFILES=""

    typeset dbname=""
    typeset dbuniq=""
    typeset diagdest=""
    typeset fname=""
    typeset pfile="/tmp/pfile_${ORACLE_SID}.$$.txt"
    typeset iobuf=""

    fname="${ORACLE_HOME}/dbs/init${ORACLE_SID}.ora"  ; [[ -h $fname ]] && fname=$(readlink $fname); [[ -e $fname ]] && INITORA=$fname ;
    fname="${ORACLE_HOME}/dbs/spfile${ORACLE_SID}.ora"; [[ -h $fname ]] && fname=$(readlink $fname); [[ -e $fname ]] && SPFILE=$fname  ;
    [[ -e  $INITORA ]] &&
    {
        grep -q -i ^ifile $INITORA
        [[ $? -eq 0 ]] && { fname=$(perl -ne 'if (/^ifile/i) {chomp; s/\s*#.*$//; @_=split(/\s*=\s*/); $f=$_[1]; $f =~ s/^[\047\042]//; $f =~ s/[\047\042]$//; print $f;}' $INITORA); [[ -e $fname ]] && CONFIGORA=$fname; }
        grep -q -i ^spfile $INITORA
        [[ $? -eq 0 ]] && { fname=$(perl -ne 'if (/^spfile/i) {chomp; s/\s*#.*$//; @_=split(/\s*=\s*/); $f=$_[1]; $f =~ s/^[\047\042]//; $f =~ s/[\047\042]$//; print $f;}' $INITORA); [[ -e $fname ]] && SPFILE=$fname; }
    }

    if [[ -e $SPFILE ]]
    then
        LINDE_DBS_PFILE=$(dirname $SPFILE)
        _spfile_strings $SPFILE >$pfile 
    elif [[ -e $INITORA ]]
    then
        LINDE_DBS_PFILE=$(dirname $INITORA)
        cp $INITORA $pfile
        [[ -e "$CONFIGORA" ]] && cat $CONFIGORA >>$pfile
        perl -pi -e '{s/\s*=s*/=/g;}' $pfile
    fi

    # DBNAME=$(grep -i db_name= $pfile | awk -F= '{print $2}' | sed s/\'//g)
    dbname=$(echo ${ORACLE_DB_NAME} | tr '[:upper:]' '[:lower:]')
    dbuniq=$(echo ${ORACLE_DB_UNIQUE_NAME} | tr '[:upper:]' '[:lower:]')

    if [[ -e $pfile ]]
    then
        iobuf=$(_spfile_environment $pfile $sid)
        eval $iobuf

        [[ -n ${_control_files}         ]] && CONTROLFILES=${_control_files}
        [[ -n ${_background_dump_dest}  ]] && LINDE_DBS_BDUMP=${_background_dump_dest}
        [[ -n ${_user_dump_dest}        ]] && LINDE_DBS_UDUMP=${_user_dump_dest}
        [[ -n ${_core_dump_dest}        ]] && LINDE_DBS_CDUMP=${_core_dump_dest}
        [[ -n ${_audit_file_dest}       ]] && LINDE_DBS_ADUMP=${_audit_file_dest}
        [[ -n ${_db_recovery_file_dest} ]] && LINDE_DBS_FRADEST=${_db_recovery_file_dest}
        [[ -n ${___oracle_base}         ]] && ORACLE_BASE=${___oracle_base}

        LINDE_DBS_ARCH1=$(_spfile_archdest $pfile ${ORACLE_SID})

        diagdest=$(grep -i diagnostic_dest= $pfile | sed -e 's/#.*$//;' | awk -F= '{print $2}' | sed s/\'//g)
        if [[ -n "${diagdest}" && -d "${diagdest}" ]]
        then
            LINDE_DBS_DIAG_SID=${diagdest}/diag/rdbms/${dbuniq}/${ORACLE_SID}
            [[ -z "${LINDE_DBS_BDUMP}" ]] && LINDE_DBS_BDUMP=${DIAGDIR}/trace
            [[ -z "${LINDE_DBS_UDUMP}" ]] && LINDE_DBS_UDUMP=${DIAGDIR}/trace
            [[ -z "${LINDE_DBS_CDUMP}" ]] && LINDE_DBS_CDUMP=${DIAGDIR}/cdump
        fi
        rm $pfile
    fi
    ALERTLOG=${LINDE_DBS_BDUMP}/alert_${ORACLE_SID}.log
}

# -----------------------------------------------------------------------------
# Main 
# -----------------------------------------------------------------------------

# commandline args
while [[ $# -gt 0 ]]
do
    case $1 in
    -r|--reset)
        _cleanup=1
        _cleanup_environment
        return 0
        ;;
    -u|--unset)
        _cleanup=1
        ;;
    -s|--select)
        _cleanup=1
        _select=1
        ;;
    -m|--msh)
        _cleanup=1
        _msh=1
        ;;
    -h|--help)
        echo "usage: . senvora [options] <oracle env>"
        return 1
        ;;
    -*)
        echo "usage: . senvora [options] <oracle env>"
        return 1
        ;;
    *)
        break
        ;;
    esac
    shift
done
[[ $# -gt 0 ]] && { _oracle_env_args="$1"; shift; }
[[ $# -gt 0 ]] && { _oracle_env_type="$1"; shift; }

# empty argslist: display list of possible oracle_sid's
[[ -z "${_oracle_env_args}" ]] &&
{
    _create_listing ${_select}
    [[ -z "${_oracle_env_args}" ]] && { _unset_local_environment; return 0; }
}

# determine serv/type/name/file
if [[ ${_oracle_env_type} == "service" ]]
then
    _oracle_env_serv=${_oracle_env_args%:*}
    _oracle_env_file=${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/service
else
    case ${_oracle_env_args} in
    *:*)
        _oracle_env_serv=${_oracle_env_args%:*}
        _oracle_env_name=${_oracle_env_args#*:}
        ;;
    *)
        _oracle_env_serv=""
        _oracle_env_name=${_oracle_env_args}
        ;;
    esac

# cat <<EofHERE
#     _oracle_env_args $_oracle_env_args
#     _oracle_env_serv $_oracle_env_serv
#     _oracle_env_type $_oracle_env_type
#     _oracle_env_name $_oracle_env_name
#     _oracle_env_file $_oracle_env_file
# EofHERE

    if [[ -n ${_oracle_env_serv} ]]
    then
        if [[ -n ${_oracle_env_type} ]]
        then
            # service=known // type=known
            _oracle_env_file=${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/${_oracle_env_type}/${_oracle_env_name}
        else
            # service=known // type=unknown
            [[ "${_uname}" == 'linux' ]] && _iobuf_=$(find ${LINDE_ORA_SITE}/etc/${_oracle_env_serv} -mindepth 1 -maxdepth 1 -type d 2>/dev/null | xargs -n1 -I{} find {}/ -name ${_oracle_env_name}.env 2>/dev/null)
            [[ "${_uname}" == 'aix' ]]   && _iobuf_=$(find ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/*/ -name ${_oracle_env_name}.env)
            [[ -n ${_iobuf_} ]] && { _count_=$(echo "${_iobuf_}" | wc -l); }
            if [[ ${_count_} -eq 0 ]]
            then
                echo "error> ${_oracle_env_type}/${_oracle_env_args} not found within ${LINDE_ORA_SITE}/etc/sysconfig"
                _unset_local_environment
                return 1
            elif [[ ${_count_} -eq 1 ]]
            then
                _oracle_env_file=${_iobuf_}
            else
                _iobuf_=$(echo "${_iobuf_}" | sort)
                _oracle_env_file=$(_get_env_file ${_iobuf_})
                if [[ $? -ne 0 ]]
                then
                    echo "warning> ${_oracle_env_type}/${_oracle_env_args} not unique, using first in list."
                    echo "${_iobuf_}"
                    _oracle_env_file=$(echo "${_iobuf_}" | head -1 )
                fi
            fi
            _iobuf_=$(dirname ${_oracle_env_file})
            _oracle_env_type=$(basename ${_iobuf_})
            _iobuf_=$(dirname ${_iobuf_})
            _oracle_env_serv=$(basename ${_iobuf_})
            _iobuf_=$(basename ${_oracle_env_file})
            _oracle_env_name=${_iobuf_%.env}
        fi
    else
        if [[ "${_uname}" == 'aix' ]]
        then
            _servs_=$(find ${LINDE_ORA_SITE}/etc/sysconfig -type d | perl -pe "{s@^${LINDE_ORA_SITE}/etc/?@@;}" | xargs -n1  dirname | sort -u | grep -v "^\.")
            _servs_=$(echo $_servs_ | tr ' ' ',')
            if [[ -n ${_oracle_env_type} ]]
            then
                # service=unknown // type=known
                _iobuf_=$(eval find ${LINDE_ORA_SITE}/etc/\{${_servs_},_dummy_\}/${_oracle_env_type} -name ${_oracle_env_name}.env 2>/dev/null) 
            else
                # service=unknown // type=unknown
                _iobuf_=$(eval find ${LINDE_ORA_SITE}/etc/\{${_servs_},_dummy_\}/*/ -name ${_oracle_env_name}.env 2>/dev/null)
            fi
        fi

        if [[ "${_uname}" == 'linux' ]]
        then
            if [[ -n ${_oracle_env_type} ]]
            then
                # service=unknown // type=known
                _iobuf_=$(find ${LINDE_ORA_SITE}/etc/sysconfig -mindepth 1 -maxdepth 1 -type d 2>/dev/null | xargs -n1 -I{} find {}/${_oracle_env_type}/ -name ${_oracle_env_name}.env 2>/dev/null)
            else
                # service=unknown // type=unknown
                _iobuf_=$(find ${LINDE_ORA_SITE}/etc/sysconfig -mindepth 1 -maxdepth 1 -type d 2>/dev/null | xargs -n1 -I{} find {}/ -name ${_oracle_env_name}.env 2>/dev/null)
            fi
        fi
        
        _count_=0
        [[ -n ${_iobuf_} ]] && { _count_=$(echo "${_iobuf_}" | wc -l); }
        if [[ ${_count_} -eq 0 ]]
        then
            echo "error> ${_oracle_env_type}/${_oracle_env_args} not found within ${LINDE_ORA_SITE}/etc/sysconfig"
            _unset_local_environment
            return 1
        elif [[ ${_count_} -eq 1 ]]
        then
            _oracle_env_file=${_iobuf_}
        else
            _iobuf_=$(echo "${_iobuf_}" | sort)
            _oracle_env_file=$(_get_env_file ${_iobuf_})
            if [[ $? -ne 0 ]]
            then
                echo "warning> ${_oracle_env_type}/${_oracle_env_args} not unique, using first in list."
                echo "${_iobuf_}"
                _oracle_env_file=$(echo "${_iobuf_}" | head -1)
            fi
        fi
        _iobuf_=$(dirname ${_oracle_env_file})
        _oracle_env_type=$(basename ${_iobuf_})
        _iobuf_=$(dirname ${_iobuf_})
        _oracle_env_serv=$(basename ${_iobuf_})
        _iobuf_=$(basename ${_oracle_env_file})
        _oracle_env_name=${_iobuf_%.env}
    fi
fi

#   cat <<EofHERE
#       _oracle_env_args $_oracle_env_args
#       _oracle_env_serv $_oracle_env_serv
#       _oracle_env_type $_oracle_env_type
#       _oracle_env_name $_oracle_env_name
#       _oracle_env_file $_oracle_env_file
#   EofHERE
# unset all environment variables, whose value matches $ORACLE_HOME, $AC2_INSTANCE_ROOT, $ORACLE_SID
_cleanup_environment

# export oracle environment
case ${_oracle_env_type} in
    service)
        set -a
        for _env_ in \
				${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/service.env \
			do
				[[ -r ${_env_} ]] && . ${_env_}
        done
        set +a
        unset _env_
        ;;
    database)
        set -a
        for _env_ in \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/service.env \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/database/${_oracle_env_name}.env \
        do
            [[ -r ${_env_} ]] && . ${_env_}
        done
        set +a
        unset _env_
        ;;
    pluggable)
        set -a
        for _env_ in \
            ${LINDE_ORA_SITE}/etc/site.env \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/site.env \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/service.env \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/service.pathnames.env \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/pluggable/${_oracle_env_name}.env \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/pluggable/${_oracle_env_name}.pathnames.env
        do
            [[ -r ${_env_} ]] && . ${_env_}
        done
        for _env_ in \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/database/${ORACLE_CONTAINER_NAME}.env \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/database/${ORACLE_CONTAINER_NAME}.pathnames.env
        do
            [[ -r ${_env_} ]] && . ${_env_}
        done
        set +a
        unset _env_
        ;;
    oraclehome)
        set -a
        for _env_ in \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/service.env \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/oraclehome/${_oracle_env_name}.env \
        do
            [[ -r ${_env_} ]] && . ${_env_}
        done
        set +a
        unset _env_
        ;;
    listener)
        set -a
        for _env_ in \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/service.env \
            ${LINDE_ORA_SITE}/etc/${_oracle_env_serv}/listener/${_oracle_env_name}.env
        do
            [[ -r ${_env_} ]] && . ${_env_}
        done
        set +a
        unset _env_
        ;;
esac

# check environment variables
case ${_oracle_env_type} in
    service)
        [[ -z "${LINDE_SVC_SERVICE_NAME}" ]]  && { echo "environment variable LINDE_SVC_SERVICE_NAME missing" ; _rc_senvora=1; }
        ;;
    database)
        [[ -z "${ORACLE_SID}"           ]]  && { echo "environment variable ORACLE_SID missing"           ; _rc_senvora=1; }
        [[ -z "${ORACLE_DB_NAME}"       ]]  && { echo "environment variable ORACLE_DB_NAME missing"       ; _rc_senvora=1; }
        [[ -z "${ORACLE_SERVICE_NAME}"  ]]  && { echo "environment variable ORACLE_SERVICE_NAME missing"  ; _rc_senvora=1; }
        [[ -z "${ORACLE_HOME}"          ]]  && { echo "environment variable ORACLE_HOME missing"          ; _rc_senvora=1; }
        [[ -z "${ORACLE_BASE}"          ]]  && { echo "environment variable ORACLE_BASE missing"          ; _rc_senvora=1; }
        ;;    
    pluggable)
        [[ -z "${ORACLE_PDB_NAME}"       ]]  && { echo "environment variable ORACLE_PDB_NAME missing"       ; _rc_senvora=1; }
        [[ -z "${ORACLE_PDB_SHORT_NAME}" ]]  && { echo "environment variable ORACLE_PDB_SHORT_NAME missing" ; _rc_senvora=1; }
        [[ -z "${ORACLE_CONTAINER_NAME}" ]]  && { echo "environment variable ORACLE_CONTAINER_NAME missing" ; _rc_senvora=1; }
        [[ -z "${ORACLE_SID}"            ]]  && { echo "environment variable ORACLE_SID missing"            ; _rc_senvora=1; }
        [[ -z "${ORACLE_DB_NAME}"        ]]  && { echo "environment variable ORACLE_DB_NAME missing"        ; _rc_senvora=1; }
        [[ -z "${ORACLE_SERVICE_NAME}"   ]]  && { echo "environment variable ORACLE_SERVICE_NAME missing"   ; _rc_senvora=1; }
        [[ -z "${ORACLE_HOME}"           ]]  && { echo "environment variable ORACLE_HOME missing"           ; _rc_senvora=1; }
        [[ -z "${ORACLE_BASE}"           ]]  && { echo "environment variable ORACLE_BASE missing"           ; _rc_senvora=1; }
        ;;
    listener)
        [[ -z "${ORACLE_HOME}"         ]]  && { echo "environment variable ORACLE_HOME missing"           ; _rc_senvora=1; }
        [[ -z "${ORACLE_BASE}"         ]]  && { echo "environment variable ORACLE_BASE missing"           ; _rc_senvora=1; }
        ;;
    oraclehome)
        [[ -z "${ORACLE_HOME}"         ]]  && { echo "environment variable ORACLE_HOME missing"           ; _rc_senvora=1; }
        [[ -z "${ORACLE_BASE}"         ]]  && { echo "environment variable ORACLE_BASE missing"           ; _rc_senvora=1; }
        ;;
esac
[[ ${_rc_senvora} -ne 0 ]] && { _unset_local_environment; return 1; }

# setup PATH and LD_LIBRARY_PATH
case ${_oracle_env_type} in
    service)
        :
        ;;
    database|pluggable)
        [[ -z ${NLS_LANG} ]]  && { NLS_LANG="AMERICAN_AMERICA.WE8ISO8859P1"; }
        set -o noglob
        # _pathedit   unset "/opt/oracle/base/product/"
        _pathedit     set ${ORACLE_HOME}/bin 
        # _ldpathedit unset "/opt/oracle/base/product/"
        _ldpathedit   set ${ORACLE_HOME}/lib
        set +o noglob
        export NLS_LANG
        [[ "${_uname}" == 'linux' ]] && export LD_LIBRARY_PATH
        [[ "${_uname}" == 'aix' ]]   && export LIBPATH
        ;;    
    listener|oraclehome)
        [[ -z ${NLS_LANG} ]]  && { NLS_LANG="AMERICAN_AMERICA.WE8ISO8859P1"; }
        set -o noglob
        # _pathedit   unset "/opt/oracle/base/product/"
        _pathedit     set ${ORACLE_HOME}/bin
        # _ldpathedit unset "/opt/oracle/base/product/"
        _ldpathedit   set ${ORACLE_HOME}/lib
        set +o noglob
        export NLS_LANG
        [[ "${_uname}" == 'linux' ]] && export LD_LIBRARY_PATH
        [[ "${_uname}" == 'aix' ]]   && export LIBPATH
        ;;
    *)
        echo "invalid environment type ${_oracle_env_type}."
        _rc_senvora=1
        ;;
esac

# let's set TZ variable based on precedence:
#   1. service timezone from order config (if exists)
#      otherwise
#   2. login timezone set up after login to login shell (if exists in bash_rc, bash_profile, profile, /etc/environment on AIX,..)
#      otherwise
#   3. none (unset, /etc/localtime on Linux, some smitty config on AIX)
[[ "${_uname}" == 'aix' ]] && tz_login=$(unset TZ; . /etc/environment 2>/dev/null 1>&2; export TZ; bash --login -i -c 'echo $TZ' 2>/dev/null | tail -1)
[[ "${_uname}" != 'aix' ]] && tz_login=$(unset TZ; export TZ; bash --login -i -c 'echo $TZ' 2>/dev/null | tail -1)

# start at the bottom, override to the top following precedence rules

# 3. none timezone
#    remember timezone abbreviation
unset TZ
tz_none="${TZ}"
tz_none_abbr=$(date +"%Z")
export TZ_NONE="${TZ}"

# 2. login timezone
#    remember timezone abbreviation after login
#    remember and export for external scripts: ora_backup_db
[[ -n "${tz_login}" ]] && export TZ="${tz_login}"
tz_login_abbr=$(date +"%Z")
export TZ_LOGIN="${TZ}"

# 1. service timezone
#    remember timezone abbreviation for currently effective TZ
#    remember and export for external scripts: ora_backup_db
[[ -n "${LINDE_SVC_TIMEZONE}" ]] && export TZ="${LINDE_SVC_TIMEZONE}"
tz_service_abbr=$(date +"%Z")
export TZ_SERVICE="${TZ}"

# determine whether to print notice on current timezone being different
# than default TZ after login (unset or set after login)

# Pacific/Honolulu
# echo "DEBUG: ${tz_login_abbr}"
# echo "DEBUG: ${tz_service_abbr}"

if [[ "${tz_login_abbr}" != "${tz_service_abbr}" ]]
then
    tz_message=$'\n'
    tz_message+="=============================================================================="$'\n'
    tz_message+="    Beware!"$'\n'
    tz_message+="    Your current session timezone ${tz_service_abbr} differs from default timezone ${tz_login_abbr}."$'\n'
    tz_message+="=============================================================================="$'\n'
else
    tz_message=$'\n'
fi

# setup directory shortcuts for convenience
# print brief environment report
case ${_oracle_env_type} in
    service)
        export MP=${LINDE_SVC_ROOT}
        echo "=============================================================================="
        echo "    LINDE_SVC_SERVICE_NAME   = ${LINDE_SVC_SERVICE_NAME:-undefined}"
        echo "    LINDE_SVC_OWNER          = ${LINDE_SVC_OWNER:-undefined}"
        echo "    LINDE_SVC_SITEID         = ${LINDE_SVC_SITEID:-undefined}"
        echo "    LINDE_SVC_STORAGE_SYSTEM = ${LINDE_SVC_STORAGE_SYSTEM:-undefined}"
        echo "    LINDE_SVC_ROOT           = ${LINDE_SVC_ROOT:-undefined}"
        echo "    LINDE_SVC_BASE           = ${LINDE_SVC_BASE:-undefined}"
        echo "    LINDE_SVC_ADMIN          = ${LINDE_SVC_ADMIN:-undefined}"
        echo "    LINDE_SVC_ETC            = ${LINDE_SVC_ETC:-undefined}"
        echo "    LINDE_SVC_INITD          = ${LINDE_SVC_INITD:-undefined}"
        echo "    PATH                     = ${PATH:-undefined}"
        [[ "${_uname}" == 'linux' ]] &&
        echo "    LD_LIBRARY_PATH          = ${LD_LIBRARY_PATH:-undefined}"
        [[ "${_uname}" == 'aix' ]]   &&
        echo "    LIBPATH                  = ${LIBPATH:-undefined}"
        echo "    TZ                       = ${TZ:-undefined}"
        echo "=============================================================================="
        echo "${tz_message}"
        ;;
    database)
        export MP=${LINDE_SVC_ROOT}
        export OH=${ORACLE_HOME}
        export OB=${ORACLE_BASE}
        export APL=${LINDE_ORA_ARCHIVE_POOL}
        export NET=${ORACLE_HOME}/network/admin
        export ADM="${LINDE_DBS_ADMIN}"

        [[ ${_msh} -eq 1 ]] &&
        {
            _msh_setup
            export ALERTLOG CONFIGORA CONTROLFILES INITORA SPFILE
        }

        echo "=============================================================================="
        echo "    ORACLE_SID             = ${ORACLE_SID:-undefined} [${_oracle_env_type}]"
        echo "    ORACLE_DB_NAME         = ${ORACLE_DB_NAME:-undefined}"
        echo "    ORACLE_SERVICE_NAME    = ${ORACLE_SERVICE_NAME:-undefined}"
        echo "    ORACLE_HOME            = $ORACLE_HOME"
        echo "    ORACLE_BASE            = ${ORACLE_BASE:-undefined}"
        echo "    NLS_LANG               = ${NLS_LANG:-undefined}"
        echo "    TNS_ADMIN              = ${TNS_ADMIN:-undefined}"
        [[ "${_uname}" == 'linux' ]] &&
        echo "    LD_LIBRARY_PATH        = ${LD_LIBRARY_PATH:-undefined}"
        [[ "${_uname}" == 'aix' ]]   &&
        echo "    LIBPATH                = ${LIBPATH:-undefined}"
        echo "    LINDE_SVC_ROOT         = ${LINDE_SVC_ROOT:-undefined}"
        echo "    LINDE_SVC_BASE         = ${LINDE_SVC_BASE:-undefined}"
        echo "    PATH                   = ${PATH:-undefined}"
        echo "    TZ                     = ${TZ:-undefined}"
        echo "=============================================================================="
        echo "${tz_message}"
        ;;
    pluggable)
        export MP=${LINDE_SVC_ROOT}
        export OH=${ORACLE_HOME}
        export OB=${ORACLE_BASE}
        export APL=${LINDE_ORA_ARCHIVE_POOL}
        export NET=${ORACLE_HOME}/network/admin
        export ADM="${LINDE_DBS_ADMIN}"
        export CDB="${ORACLE_CONTAINER_NAME}"
        export PDB="${ORACLE_PDB_NAME}"
        
        [[ ${_msh} -eq 1 ]] &&
        {
            _msh_setup
            export ALERTLOG CONFIGORA CONTROLFILES INITORA SPFILE
        }

        echo "=============================================================================="
        echo "    ORACLE_PDB_NAME        = ${ORACLE_PDB_NAME} [${_oracle_env_type}]"
        echo "    ORACLE_PDB_SHORT_NAME  = ${ORACLE_PDB_SHORT_NAME}"
        echo "    ORACLE_CONTAINER_NAME  = ${ORACLE_CONTAINER_NAME}"
        echo "    ORACLE_SID             = ${ORACLE_SID:-undefined}"
        echo "    ORACLE_DB_NAME         = ${ORACLE_DB_NAME:-undefined}"
        echo "    ORACLE_SERVICE_NAME    = ${ORACLE_SERVICE_NAME:-undefined}"
        echo "    ORACLE_HOME            = $ORACLE_HOME"
        echo "    ORACLE_BASE            = ${ORACLE_BASE:-undefined}"
        echo "    NLS_LANG               = ${NLS_LANG:-undefined}"
        echo "    TNS_ADMIN              = ${TNS_ADMIN:-undefined}"
        [[ "${_uname}" == 'linux' ]] &&
        echo "    LD_LIBRARY_PATH        = ${LD_LIBRARY_PATH:-undefined}"
        [[ "${_uname}" == 'aix' ]]   &&
        echo "    LIBPATH                = ${LIBPATH:-undefined}"
        echo "    LINDE_SVC_ROOT         = ${LINDE_SVC_ROOT:-undefined}"
        echo "    LINDE_SVC_BASE         = ${LINDE_SVC_BASE:-undefined}"
        echo "    PATH                   = ${PATH:-undefined}"
        echo "    TZ                     = ${TZ:-undefined}"
        echo "=============================================================================="
        echo "${tz_message}"
        ;;
    listener|oraclehome)
        export OH=${ORACLE_HOME}
        export NET=${ORACLE_HOME}/network/admin

        echo "=============================================================================="
        echo "    LISTENER_NAME          = ${LISTENER_NAME:-undefined}"
        echo "    ORACLE_SERVICE_NAME    = ${ORACLE_SERVICE_NAME:-undefined}"
        echo "    ORACLE_HOME            = $ORACLE_HOME"
        echo "    ORACLE_BASE            = ${ORACLE_BASE:-undefined}"
        echo "    NLS_LANG               = ${NLS_LANG:-undefined}"
        echo "    TNS_ADMIN              = ${TNS_ADMIN:-undefined}"
        [[ "${_uname}" == 'linux' ]] &&
        echo "    LD_LIBRARY_PATH        = ${LD_LIBRARY_PATH:-undefined}"
        [[ "${_uname}" == 'aix' ]]   &&
        echo "    LIBPATH                = ${LIBPATH:-undefined}"
        echo "    LINDE_SVC_ROOT         = ${LINDE_SVC_ROOT:-undefined}"
        echo "    LINDE_SVC_BASE         = ${LINDE_SVC_BASE:-undefined}"
        echo "    PATH                   = ${PATH:-undefined}"
        echo "    TZ                     = ${TZ:-undefined}"
        echo "=============================================================================="
        echo "${tz_message}"
        ;;
    *)
        echo "invalid environment type ${_oracle_env_type}."
        _rc_senvora=1
        ;;
esac

[[ ${_rc_senvora} -ne 0 ]] && { _unset_local_environment; return 1; }

_unset_local_environment

[[ "${BASH_SOURCE}" == "${0}" ]] && exit 0 || return 0
